
<!-- Knowldege Graph -->

<script src="https://d3js.org/d3.v7.min.js"></script>
<style>
  /* Add CSS styling for the graph container */
  #graph-container {
    width: 800px;
    height: 700px;
    /* border: 1px solid #ccc; */
  }

  .node {
    cursor: pointer;
    stroke-width: 2px;
    stroke: #aaa; /* Add border color */
    transition: r 0.3s ease;
    /* Transition for node size */
  }

  .node:hover {
    r: 25; /* Increase the circle radius on hover */
  }

  .node text {
    font-size: 14px;
    text-anchor: middle;
    display: none;
  }

  .node:hover text {
    display: block; /* Show text label on hover */
  }

  .link {
    fill: none;
    stroke: #999;
    stroke-width: 0.5px;
  }

  .label {
    font-size: 14px;
    text-anchor: middle;
    display: none;
    user-select: none; /* Disable text selection */
  }

  .page {
    display: none;
    margin-top: 5px;
    padding: 5px;
    border: 1px solid #ccc;
    background-color: #f9f9f9;
  }
</style>
</head>

<body>
<div id="graph-container"></div>

<script>
// JavaScript for D3 Tree Graph

// Define data structure for the graph
const data = {
    name: 'Machine Learning',
    children: [
      {
        name: 'Algorithms',
        children: [
          { name: 'Knn Classifier' },
          { name: 'Linear Regression' },
          { name: 'Gradient Descent' },
          { name: 'Decision Tree', url: 'https://example.com' },
        ],
      },
      {
        name: 'Supervised',
        children: [
          { name: 'Knn Classifier2' },
          { name: 'Linear Regression2' },
          { name: 'Basis Expansion' },
          { name: 'Regularization' },
          { name: 'Decision Tree2' },
          { name: 'Random Forest' },
          { name: 'Logistic Regression' },
        ],
      },
      {
        name: 'Datasets',
        children: [
          { name: 'Simulated Data' },
          { name: 'Tmdb' },
        ],
      },
      {
        name: 'Calculus',
        children: [
          { name: 'Derivatives' },
          { name: 'Integrals' },
        ],
      },
      // ... more categories, subcategories, and pages
    ]
  };

// Set up the SVG and dimensions
const width = 800;
const height = 700;
const svg = d3.select("#graph-container").append("svg")
              .attr("width", width)
              .attr("height", height);

// Define the force simulation
const simulation = d3.forceSimulation()
                     .force("link", d3.forceLink().id(d => d.id).distance(100))
                     .force("charge", d3.forceManyBody().strength(-70))
                     .force("center", d3.forceCenter(width / 2, height / 2));

// Helper functions to process data
const flatten = (root) => {
  const nodes = [];
  const recurse = (node, depth) => {
    if (node.children) {
      node.children.forEach(child => {
        nodes.push({ id: child.name.replace(/\s+/g, "_"), data: child, depth: depth + 1 });
        recurse(child, depth + 1);
      });
    }
  };
  nodes.push({ id: root.name, data: root, depth: 0 });
  recurse(root, 0);
  return nodes;
};

const generateLinks = (nodes) => {
  const links = [];
  nodes.forEach(node => {
    if (node.data.children) {
      node.data.children.forEach(child => {
        const target = nodes.find(n => n.data.name === child.name);
        if (target) links.push({ source: node, target });
      });
    }
  });
  return links;
};

// Process the data to create nodes and links
const nodes = flatten(data);
const links = generateLinks(nodes);

// Define the graph elements: nodes and links
const link = svg.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(links)
                .enter().append("line")
                .attr("class", "link");

const node = svg.append("g").attr("class", "nodes")
                .selectAll("circle")
                .data(nodes)
                .enter().append("circle")
                .attr("class", "node")
                .attr("r", d => d.depth === 0 ? 10 : d.depth === 1 ? 8 : 5) // Root node larger
                .attr("fill", d => d.depth === 0 ? "#F5A9A9" : d.depth === 1 ? "#F3F781" : "#FFF")
                .call(d3.drag() // Define drag behavior
                          .on("start", dragstarted)
                          .on("drag", dragged)
                          .on("end", dragended));

const label = svg.append("g")
                 .attr("class", "labels")
                 .selectAll("text")
                 .data(nodes)
                 .enter().append("text")
                 .attr("class", "label")
                 .text(d => d.data.name)
                 .style("display", d => d.depth === 0 || d.depth === 1 ? "block" : "none");

// Drag functions
function dragstarted(event, d) {
  if (!event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(event, d) {
  d.fx = event.x;
  d.fy = event.y;
}

function dragended(event, d) {
  if (!event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

// Update simulation nodes and links
simulation.nodes(nodes).on("tick", ticked);
simulation.force("link").links(links);

function ticked() {
  link.attr("x1", d => d.source.x)
      .attr("y1", d => d.source.y)
      .attr("x2", d => d.target.x)
      .attr("y2", d => d.target.y);
      
  node.attr("cx", d => d.x)
      .attr("cy", d => d.y);

  label.attr("x", d => d.x)
       .attr("y", d => d.y - 15);
}
</script>